name: Manual build
description: Manual build

inputs:
  tag_name:
    required: true
    type: string
  hardware_version:
    required: true
    type: string
  production:
    required: true
    type: string
  build_module:
    required: true
    type: string
  disable_ramdump:
    type: boolean
    required: false
  upload:
    required: true
    type: string
  release_type:
    required: true
    type: string
  pull_request:
    required: true
    type: string

runs:
  using: composite
  steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ inputs.branch }}
        fetch-depth: 1
        lfs: true
    - run: |
        env
        sudo apt install jq -y
        echo "${{ github.token }}" > .token.txt
        gh auth login --with-token < .token.txt
      shell: bash
    - run: |
        git fetch origin feature/github_workflow
      shell: bash
    - run: |
        git fetch origin quangtv-dev
      shell: bash
    - name: Checkout and merge
      run: |
        base_branch=$(gh pr view ${{ inputs.pull_request }} --repo ${{ github.repository }} --json baseRefName | jq '.baseRefName' | tr -d '"')
        head_branch=$(gh pr view ${{ inputs.pull_request }} --repo ${{ github.repository }} --json headRefName | jq '.headRefName' | tr -d '"')
        echo "base_branch=$base_branch"
        echo "head_branch=$head_branch"
        git fetch origin $base_branch
        git fetch origin $head_branch
        git reset --hard
        git clean -fdx
        git checkout origin/$base_branch
        git merge origin/$head_branch
      shell: bash
    - name: Get build script
      run: |
        git checkout origin/feature/github_workflow -- .github build
      shell: bash
    - name: Disable RAMDUMP
      run: |
        if [[ ${{ inputs.disable_ramdump }} ]]
        then
          git format-patch -p1 1a7f2024bb1139e48e1f1e85762c57b2b3a84f0c
          if patch -p1 < 0001-sbl-support-disable-ramdump.patch --dry-run; then
              echo "Patch applied successfully"
              patch -p1 < 0001-sbl-support-disable-ramdump.patch
          else
              echo "Failed to apply patch"
              exit -1
          fi
        fi

        bash build/build.sh ${{ inputs.tag_name }} ${{ inputs.hardware_version }} ${{ inputs.production }} ${{ inputs.build_module }} ${{ inputs.release_type }}

        if [[ ${{ inputs.release_type }} == "prerelease" ]]
        then
          zip -r Manual_build_MDM9607_${{ inputs.production }}_${{ inputs.hardware_version }}_${{ inputs.tag_name }}.zip binaries_out
          mkdir -p /share/GGDrive_FW/MANUAL_BUILD_RELEASE/MDM9607/
          cp *.zip /share/GGDrive_FW/MANUAL_BUILD_RELEASE/MDM9607/
        fi
        gh auth logout -u github-actions[bot]
        rm -f .token.txt
      shell: bash
